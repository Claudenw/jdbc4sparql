package org.xenei.jdbc4sparql;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.Statement;

import org.xenei.jdbc4sparql.iface.Catalog;
import org.xenei.jdbc4sparql.iface.Schema;
import org.xenei.jdbc4sparql.sparql.SparqlCatalog;
import org.xenei.jdbc4sparql.sparql.SparqlQueryBuilder;
import org.xenei.jdbc4sparql.sparql.SparqlView;
import org.xenei.jdbc4sparql.sparql.parser.SparqlParser;

public class J4SStatement implements Statement
{
	private J4SConnection connection;
	private SparqlCatalog catalog;
	private SQLWarning warnings = null;
	private boolean closed = false;
	private SparqlParser parser;
	private ResultSet resultSet;
	private int fetchDirection;
	private int resultSetConcurrency;
	private int queryTimeout;
	private int resultSetType;
	private int resultSetHoldability;
	private boolean poolable;
	
	public J4SStatement(J4SConnection connection, SparqlCatalog catalog, final int resultSetType, final int resultSetConcurrency,
			final int resultSetHoldability) throws SQLException
	{
		this.connection = connection;
		this.catalog = catalog;
		this.queryTimeout = connection.getNetworkTimeout();
		this.parser = connection.getSparqlParser();
		this.resultSet = null;
		this.poolable = true;
		this.resultSetHoldability = resultSetHoldability;
		this.fetchDirection = ResultSet.FETCH_FORWARD;
		this.resultSetConcurrency = resultSetConcurrency;
		this.resultSetType = resultSetType;
	}

	@Override
	public boolean isWrapperFor( Class<?> arg0 ) throws SQLException
	{
		return false;
	}

	@Override
	public <T> T unwrap( Class<T> arg0 ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public void addBatch( String arg0 ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public void cancel() throws SQLException
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	public void clearBatch() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public void clearWarnings() throws SQLException
	{
		warnings = null;
	}

	@Override
	public void close() throws SQLException
	{
		closed = true;
	}

	@Override
	public void closeOnCompletion() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public boolean execute( String sql ) throws SQLException
	{
		SparqlView view = new SparqlView( parser.parse(catalog, sql) );
		resultSet = view.getResultSet();
		resultSet.setFetchDirection( getFetchDirection() );
		return true;
	}

	@Override
	public boolean execute( String sql, int autoGeneratedKeys ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public boolean execute( String arg0, int[] columnIndexes ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public boolean execute( String arg0, String[] columnNames ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public int[] executeBatch() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public ResultSet executeQuery( String sql ) throws SQLException
	{
		execute( sql );
		return getResultSet();
	}

	@Override
	public int executeUpdate( String arg0 ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public int executeUpdate( String arg0, int arg1 ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public int executeUpdate( String arg0, int[] arg1 ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public int executeUpdate( String arg0, String[] arg1 ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public Connection getConnection() throws SQLException
	{
		return connection;
	}

	@Override
	public int getFetchDirection() throws SQLException
	{
		return fetchDirection;
	}

	@Override
	public int getFetchSize() throws SQLException
	{
		return Integer.MAX_VALUE;
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public int getMaxFieldSize() throws SQLException
	{
		return Integer.MAX_VALUE;
	}

	@Override
	public int getMaxRows() throws SQLException
	{
		return Integer.MAX_VALUE;
	}

	@Override
	public boolean getMoreResults() throws SQLException
	{
		return false;
	}

	@Override
	public boolean getMoreResults( int arg0 ) throws SQLException
	{
		return false;
	}

	@Override
	public int getQueryTimeout() throws SQLException
	{
		return queryTimeout;
	}

	@Override
	public ResultSet getResultSet() throws SQLException
	{
		return resultSet;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException
	{
		return resultSetConcurrency;
	}

	@Override
	public int getResultSetHoldability() throws SQLException
	{
		return resultSetHoldability;
	}

	@Override
	public int getResultSetType() throws SQLException
	{
		return resultSetType;
	}

	@Override
	public int getUpdateCount() throws SQLException
	{
		return 0; // don't do updates
	}

	@Override
	public SQLWarning getWarnings() throws SQLException
	{
		return warnings;
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException
	{
		return false;
	}

	@Override
	public boolean isClosed() throws SQLException
	{
		return closed;
	}

	@Override
	public boolean isPoolable() throws SQLException
	{
		return poolable;
	}

	@Override
	public void setCursorName( String arg0 ) throws SQLException
	{
		throw new SQLFeatureNotSupportedException();
	}

	@Override
	public void setEscapeProcessing( boolean arg0 ) throws SQLException
	{
		// no op  -- we don't set this
	}

	@Override
	public void setFetchDirection( int direction ) throws SQLException
	{
		switch (direction)  
		{
			case ResultSet.FETCH_REVERSE:
				fetchDirection = direction;
				break;
				
			case ResultSet.FETCH_UNKNOWN:
			case ResultSet.FETCH_FORWARD:
				fetchDirection = ResultSet.FETCH_FORWARD;
				break;
			
			default:
				throw new SQLException( "invalid fetch direciton value");
		}
	}

	@Override
	public void setFetchSize( int arg0 ) throws SQLException
	{
		// ignore this
	}

	@Override
	public void setMaxFieldSize( int arg0 ) throws SQLException
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setMaxRows( int arg0 ) throws SQLException
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setPoolable( boolean poolable ) throws SQLException
	{
		this.poolable = poolable;
	}

	@Override
	public void setQueryTimeout( int queryTimeout ) throws SQLException
	{
		this.queryTimeout = queryTimeout;
	}

}
